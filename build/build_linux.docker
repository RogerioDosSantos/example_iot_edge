# Build Linux

## Arguments / Environment Variables Used
### proxy_url: URL of the proxy that should be used during the build. E.g.: http://gateway.zscaler.net:9480

## Stage
ARG stage_image="edge_module_stage:linux"
FROM "${stage_image}" as stage

## Build
FROM microsoft/dotnet:2.2-sdk AS build
WORKDIR /workspace

### Install and Configure ZScale Certificate
ARG proxy_url=""
ENV http_proxy="${proxy_url}"
ENV https_proxy="${proxy_url}"
COPY --from=stage /workspace/zscale/zscale.crt /usr/local/share/ca-certificates
RUN echo "*** Install and Configure ZScale Certificate" \
  && echo "HTTP Proxy: ${http_proxy}" \
  && echo "HTTPS Proxy: ${https_proxy}" \
  && update-ca-certificates \
  && echo "*** Install and Configure ZScale Certificate - DONE" 

### Compile Project
#### Note: We restore and build in two steps so we profit the docker cache mechanism to compile faster
COPY ./src/edge_module/edge_module.csproj /workspace/src/edge_module.csproj
RUN echo "*** Getting project dependencies" \
  && cd /workspace/src \
  && dotnet restore \
  && echo "*** Getting project dependencies - DONE" 
COPY ./src /workspace/src
RUN echo "*** Compiling project" \
  && cd /workspace/src \
  && dotnet publish -c Release -o /workspace/stage/release \
  && echo "*** Compiling project - DONE" 

## Release
FROM microsoft/dotnet:2.2-runtime-stretch-slim
WORKDIR /workspace

### Install Release 
COPY --from=build /workspace/stage/release /workspace/bin

### Add module user 
RUN useradd -ms /bin/bash moduleuser
USER moduleuser

# EXPOSE 80
# EXPOSE 443
ENTRYPOINT ["dotnet", "/workspace/bin/edge_module.dll"]


